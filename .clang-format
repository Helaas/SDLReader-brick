# This is a .clang-format file for C/C++/Objective-C code.
# It defines formatting options that clang-format will apply.

# Based on Google style, with modifications for brace placement and indentation.
BasedOnStyle: Google

# Indent width for code.
IndentWidth: 4

# Width of a tab in columns.
TabWidth: 4

# Use tabs for indentation. Other options: 'Never', 'ForAlignAndIndent', 'ForIndent'
UseTab: Never

# The column limit for all lines of code.
ColumnLimit: 100

# Brace wrapping style.
# Controls how braces are placed for functions, control statements, and types.
BreakBeforeBraces: Custom
BraceWrapping:
  AfterClass: true
  AfterControlStatement: true
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: true
  AfterObjCBlock: true
  AfterStruct: true
  AfterUnion: true
  BeforeCatch: true
  BeforeElse: true
  BeforeLambdaBody: false
  BeforeWhile: false
  SplitEmptyRecord: true

# Add or remove trailing commas in C++ enumerations.
Cpp11BracedListStyle: true

# Control how to deal with C++11 braced lists.
BreakBeforeBraces: Custom
BraceWrapping:
  AfterFunction: true
  AfterControlStatement: true
  AfterClass: true
  AfterStruct: true
  AfterEnum: true
  AfterNamespace: true

# Align consecutive declarations.
AlignConsecutiveDeclarations: true

# Align consecutive assignments.
AlignConsecutiveAssignments: true

# Align escape sequences in raw strings.
AlignEscapedNewlines: DontAlign

# Allow short blocks on a single line.
AllowShortBlocksOnASingleLine: false

# Allow short case labels on a single line.
AllowShortCaseLabelsOnASingleLine: false

# Allow short functions to be formatted as a single line.
AllowShortFunctionsOnASingleLine: None

# Allow short if/for/while statements to be formatted on a single line.
AllowShortIfStatementsOnASingleLine: Never

# Allow short loops to be formatted on a single line.
AllowShortLoopsOnASingleLine: false

# Put a space between the 'delete' keyword and the operand.
SpaceAfterCStyleCast: false

# Put a space before opening parentheses of arguments in functions.
SpaceBeforeParens: Never

# Spaces in template arguments.
SpacesInParentheses: false

# Spaces in container literal.
SpacesInCStyleCast: false

# Spaces in brackets.
SpacesInSquareBrackets: false

# The number of spaces to use for each step of indentation.
IndentWidth: 4

# Controls whether to indent the `private`/`public` access specifiers.
AccessModifierOffset: -4

# The indentation style for switch statements.
# Case statements are indented one level from the switch statement.
IndentCaseLabels: false

# If `true`, a space is inserted after the 'template' keyword.
SpaceAfterTemplateKeyword: false

# The way to format pointer and reference types.
# `Leave` (default) means `int *a;` or `int* a;` as in the input.
# `Free` means `int * a;`.
# `Left` means `int* a;`.
# `Right` means `int *a;`.
PointerAndReferenceBindsToLHS: true

# Put `const` on the right of the type.
QualifierAlignment: Left

# Controls if and how the first parameter in a function declaration is
# wrapped.
BreakBeforeFirstReflectableParameter: DontBreak

# Insert a space before the colon in a constructor initializer list.
SpaceBeforeCtorInitializerColon: true

# Insert a space after the colon in a constructor initializer list.
SpaceAfterCtorInitializerColon: true

# Determines whether to use `///` or `/**` for documentation comments.
# `Automatic` (default) will use `///` for C++ and `/**` for C.
# `Dash` means `///`.
# `Star` means `/**`.
StandardNamespace: "std" # Or other common namespaces you use, e.g., "my_namespace"

# Always break before the first parameter.
# This option can be configured to improve readability for long function declarations.
AlwaysBreakBeforeParentheses: No

# If `false`, remove spaces after function call names.
SpaceBeforeSemicolon: No

# Controls how to deal with trailing comments.
# `Always`, `Never`, `OnlyForRequirements` (default), `ForFunctions`
CommentPragmas: "^ IWYU pragma:"

# Controls whether to put empty braces on a new line or not.
EmptyBracesOnNewLine: false
